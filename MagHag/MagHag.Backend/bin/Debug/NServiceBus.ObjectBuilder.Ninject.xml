<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.ObjectBuilder.Ninject</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.ConfigureNinjectBuilder">
            <summary>
            The static class which holds <see cref="N:NServiceBus"/> extensions methods.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNinjectBuilder.NinjectBuilder(NServiceBus.Configure)">
            <summary>
            Instructs <see cref="N:NServiceBus"/> to use the provided kernel
            </summary>
            <param name="config">The extended Configure.</param>
            <returns>The Configure.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNinjectBuilder.NinjectBuilder(NServiceBus.Configure,Ninject.IKernel)">
            <summary>
            Instructs <see cref="N:NServiceBus"/> to use the provided kernel
            </summary>
            <param name="config">The extended Configure.</param>
            <param name="kernel">The kernel.</param>
            <returns>The Configure.</returns>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Ninject.Internal.IObjectBuilderPropertyHeuristic">
            <summary>
            Implements a heuristic for ninject property injection.
            </summary>
        </member>
        <member name="P:NServiceBus.ObjectBuilder.Ninject.Internal.IObjectBuilderPropertyHeuristic.RegisteredTypes">
            <summary>
            Gets the registered types.
            </summary>
            <value>The registered types.</value>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic">
            <summary>
            Implements an more aggressive injection heuristic.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic"/> class.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic.ShouldInject(System.Reflection.MemberInfo)">
            <summary>
            Determines whether a given type should be injected.
            </summary>
            <param name="member">The member info to check.</param>
            <returns><see langword="true"/> if a given type needs to be injected; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
            only unmanaged resources.</param>
        </member>
        <member name="P:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic.RegisteredTypes">
            <summary>
            Gets the registered types.
            </summary>
            <value>The registered types.</value>
        </member>
        <member name="P:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder">
            <summary>
            Implementation of IBuilderInternal using the Ninject Framework container
            </summary>
        </member>
        <member name="F:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.kernel">
            <summary>
            The kernel hold by this object builder.
            </summary>
        </member>
        <member name="F:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.propertyHeuristic">
            <summary>
            The object builders injection propertyHeuristic for properties.
            </summary>
        </member>
        <member name="F:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.dependencyLifecycleToScopeMapping">
            <summary>
            Maps the supported <see cref="T:NServiceBus.DependencyLifecycle"/> to the <see cref="T:Ninject.Infrastructure.StandardScopeCallbacks"/> of ninject.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder"/> class.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder"/> class.
            </summary>
            <remarks>
            Uses the default object builder property <see cref="F:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.propertyHeuristic"/> 
            <see cref="T:NServiceBus.ObjectBuilder.Ninject.Internal.ObjectBuilderPropertyHeuristic"/>.
            </remarks>
            <param name="kernel">
            The kernel.
            </param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.Build(System.Type)">
            <summary>
            Builds the specified type.
            </summary>
            <param name="typeToBuild">
            The type to build.
            </param>
            <returns>
            An instance of the given type.
            </returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.BuildChildContainer">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
            <returns>A new child container.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.BuildAll(System.Type)">
            <summary>
            Returns a list of objects instantiated because their type is compatible with the given type.
            </summary>
            <param name="typeToBuild">
            The type to build.
            </param>
            <returns>
            A list of objects
            </returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.Configure(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the call model of the given component type.
            </summary>
            <param name="component">Type to be configured</param>
            <param name="dependencyLifecycle">The desired lifecycle for this type</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.Configure``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the call model of the given component type.
            </summary>
            <typeparam name="T">Type to be configured</typeparam>
            <param name="componentFactory">Factory method that return the type</param>
            <param name="dependencyLifecycle">The desired lifecycle for this type</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.ConfigureProperty(System.Type,System.String,System.Object)">
            <summary>
            Configures the property.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="property">
            The property.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the singleton.
            </summary>
            <param name="lookupType">
            Type lookup type.
            </param>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.HasComponent(System.Type)">
            <summary>
            Determines whether the specified component type has a component.
            </summary>
            <param name="componentType">
            Type of the component.
            </param>
            <returns>
            <c>true</c> if the specified component type has a component; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.GetAllServiceTypesFor(System.Type)">
            <summary>
            Gets all service types of a given component.
            </summary>
            <param name="component">The component.</param>
            <returns>All service types.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.GetInstanceScopeFrom(NServiceBus.DependencyLifecycle)">
            <summary>
            Gets the instance scope from call model.
            </summary>
            <param name="dependencyLifecycle">
            The call model.
            </param>
            <returns>
            The instance scope
            </returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.AddAliasesOfComponentToBindingConfigurations(System.Type,System.Collections.Generic.IEnumerable{Ninject.Planning.Bindings.IBindingConfiguration})">
            <summary>
            Adds the aliases of component to the binding configurations.
            </summary>
            <param name="component">The component.</param>
            <param name="bindingConfigurations">The binding configurations.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.BindComponentToItself(System.Type,System.Func{Ninject.Activation.IContext,System.Object},System.Boolean)">
            <summary>
            Binds the component to itself with the given <paramref name="instanceScope"/>.
            </summary>
            <param name="component">The component.</param>
            <param name="instanceScope">The instance scope.</param>
            <param name="addChildContainerScope">if set to <c>true</c> an additional binding scoped to the child container is added.</param>
            <returns>The created binding configurations.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.AddCustomPropertyInjectionHeuristic">
            <summary>
            Adds the custom property injection heuristic.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Ninject.NinjectObjectBuilder.RegisterNecessaryBindings">
            <summary>
            Registers the necessary bindings.
            </summary>
        </member>
    </members>
</doc>
