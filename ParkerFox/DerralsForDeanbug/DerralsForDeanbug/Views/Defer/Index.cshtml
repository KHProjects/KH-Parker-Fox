@model DerralsForDeanbug.ViewModels.DeferViewModel

@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/jquery-1.9.0.min.js"></script>

@using (Html.BeginForm())
{
    <div class="deferalOptions">
        <label>option one:</label><input type="radio" name="deferalOption" value="1" checked="checked"/><br/>
        <label>option two:</label><input type="radio" name="deferalOption" value="2"/>
    </div>
    <div>
        @Html.EditorFor(x=>x.Loans)
    </div>
    <div>
        <div>min: <span id="Minimum" data-bind="Minimum"></span></div>
        repayment: @Html.TextBoxFor(x => x.Total)
    </div>
    <input id="deferCommand" type="button" value="defer"/>
}

<script>
    var deferViewModel = @Html.Raw(Json.Encode(Model)); //--generate a JS viewModel which is a copy of the C# viewModel

    deferViewModel.adjustTotal = function(amount) {
        var selectedLoans = $.grep(this.Loans, function(loan) {
            return loan.IsSelected;
        });
        if (selectedLoans.length > 0) {
            var deferralStrategy = this.getDeferalStrategy();
            deferralStrategy.apply(selectedLoans, amount);

            this.updateView();
        }
    };

    deferViewModel.calculateMinimum = function() {
        var selectedLoans = $.grep(this.Loans, function(loan) {
            return loan.IsSelected;
        });
        var total = 0;
        $.each(selectedLoans, function(loanIndex, loan) {
            total += loan.Minimum;
        });
        return total;
    };

    //this is probably over-architecture, trying some strategy pattern in JS.. you could just call different function depending on Option 
    deferViewModel.getDeferalStrategy = function() {
        switch (this.Option) {
        case 1:
            return {
                apply: function(loans, amount) {
                    amount = amount / loans.length;
                    $.each(loans, function(loanIndex, loan) {
                        loan.Reduction = amount;
                    });
                }
            };
        case 2:
            return {
                apply: function(loans, amount) {
                    $.each(loans, function(loanIndex, loan) {
                        loan.Reduction = amount;
                    });
                }
            };
        }
    };

    deferViewModel.bindToView = function() {
        this.updateView();
        bindFieldToObject($('#Total'), deferViewModel, "Total");

        var loanRows = $('.active-loan');
        var $this = this;
        $.each(this.Loans, function(index, loan) {
            var boundFields = $(loanRows[index]).children('[data-bind]');

            $.each(boundFields, function(fieldIndex, field) {
                field = $(field);
                var bindExpression = field.attr('data-bind');
                bindFieldToObject(field, loan, bindExpression);
            });
        });
    };

    //knockout would auto detect change on an object and apply it to the ui
    deferViewModel.updateView = function() {
        $('#Minimum').text(deferViewModel.calculateMinimum());

        var loanRows = $('.active-loan');
        
        $.each(this.Loans, function(index, loan) {
            var boundFields = $(loanRows[index]).children('[data-bind]');
            $.each(boundFields, function(fieldIndex, field) {
                field = $(field);
                var bindExpression = field.attr('data-bind');
                field.val(loan[bindExpression]).text(loan[bindExpression]); //text handles just the labels
            });
        });
    };

    function bindFieldToObject(field, object, property) {
        if (field.attr('type') == 'text') {
            field.keyup(function() {
                object[property] = $(this).val();
                deferViewModel.updateView(); //--lost generic framework style code here by refering to instance
            });
        }
        if (field.attr('type') == 'checkbox') {
            field.on("change", function() {
                object[property] = $(this).is(':checked');
                deferViewModel.updateView(); //--lost generic framework style code here by refering to instance
            });
        }
    };
</script>

<script>
    $(function () {

        deferViewModel.bindToView();

        $('#deferCommand').click(function() {
            deferViewModel.adjustTotal($('#Total').val());
        });

        $('.deferalOptions :radio').on("change", function () {
            deferViewModel.Option = parseInt($(this).val());
            deferViewModel.updateView();
        });
    });
</script>